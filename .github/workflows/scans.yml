# SPDX-FileCopyrightText: Intel Corporation
#
# SPDX-License-Identifier: BSD-3-Clause

on:
  workflow_dispatch:
  schedule:
  - cron: '0 0 * * Sun'

jobs:
  bdba:
    runs-on: dds-base
    env:
      CXX: g++-12
      SCAN_NAME: DistributedRanges-${{ github.shaA }}
    steps:
    - uses: actions/checkout@v3
    - name: Build & test
      run: |
        source /opt/intel/oneapi/setvars.sh
        cmake -B build
        make -j -C build/examples/mhp all test
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: python3 -m pip install -i https://${{ secrets.BDBA_HOST }}/artifactory/api/pypi/dtt-pypi-igk-local/simple bdba
    - name: Scan
      run: |
        tar -cvzf build/dr-bdba.tgz --exclude="*.o" build/examples/mhp
        bdba upload --scan-name ${SCAN_NAME}} --products-json-path build/bdba.json --path build/dr-bdba.tgz --key ${{ secrets.BDBA_KEY }}
        bdba override --products-json-path build/bdba.json -c test/bdba/bdba.yaml --key ${{ secrets.BDBA_KEY }}
        bdba pdf-report --products-json-path build/bdba.json --key ${{ secrets.BDBA_KEY }}
    - uses: actions/upload-artifact@v3
      with:
        name: bdba
        path: dr-bdba.tgz.pdf

  coverity:
    runs-on: dds-base
    env:
      CXX: g++-10
    steps:
    - uses: actions/checkout@v3

    - name: Configure coverity
      run: |
        /opt/coverity/analysis/bin/cov-configure --config coverity.xml --compiler ${CXX} --comptype gcc --template

    - name: Build with coverity
      run: |
        source /opt/intel/oneapi/setvars.sh
        cmake -B build
        /opt/coverity/analysis/bin/cov-build --config coverity.xml --dir idir make -j -C build all

    - name: Analyze and upload results
      run: |
        /opt/coverity/analysis/bin/cov-analyze --dir idir --concurrency --security --rule --enable-constraint-fpp --enable-fnptr --enable-virtual
        echo '${{ secrets.COVERITY_AUTH }}' > auth.key
        chmod 600 auth.key
        /opt/coverity/analysis/bin/cov-commit-defects --dir idir --stream "DR main" --url https://${{ secrets.COVERITY_HOST }}/prod7 --auth-key-file auth.key
        /opt/coverity/reports/bin/cov-generate-cvss-report test/coverity/covreport.yml --output dr-coverity-cvss.pdf --report --auth-key-file auth.key
        /opt/coverity/reports/bin/cov-generate-security-report test/coverity/covreport.yml --output dr-coverity-security.pdf --auth-key-file auth.key
        rm auth.key
    - uses: actions/upload-artifact@v3
      with:
        name: coverity
        path: dr-coverity*.pdf

  malware:
    runs-on: dds-base
    env:
      CXX: g++-12
    steps:
    - uses: actions/checkout@v3
    - name: Build & test
      run: |
        source /opt/intel/oneapi/setvars.sh
        cmake -B build
        make -j -C build/examples/mhp all test
    - name: Scan
      run: |
         uvscan --RPTOBJECTS --RECURSIVE --UNZIP --HTML=build/scan-report.html --LOUD --SUMMARY --ANALYZE --PANALYZE build/examples/mhp
    - uses: actions/upload-artifact@v3
      with:
        name: malware
        path: build/scan-report.html

  fuzzer:
    runs-on: dds-base
    env:
      CXX: clang++
    steps:
    - uses: actions/checkout@v3
    - name: Build & test
      run: |
        source /opt/intel/oneapi/setvars.sh
        cmake -B build
        cd build/test/fuzz/cpu
        make -j all
        ctest -C long_fuzz
    - uses: actions/upload-artifact@v3
      with:
        name: fuzzer
        path: build/test/fuzz/cpu/Testing
